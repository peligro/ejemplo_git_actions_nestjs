name: Despliegue to EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configurar SSH e implementar en EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/proyecto
            
            # Pull última versión del código
            git fetch origin main
            git reset --hard origin/main
            
            # Crear .env si es que no existe 
            if [ ! -f .env ]; then
              cp .env.example .env
            fi
            
            # Actualizar .env con secrets - PUERTO 80 para la aplicación
            cat > .env << EOF
            CURSO_TEST=App de recetas
            CURSO_SERVER_PORT=3000  # Puerto INTERNO del contenedor
            SMTP_SERVER=
            SMTP_PORT=
            SMTP_USER=
            SMTP_PASSWORD=
            # Conectarse a Supabase a través del pool de conexiones (pooling)
            DATABASE_URL="postgresql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:6543/${{ secrets.DB_DATABASE }}?pgbouncer=true"
            # Conexión directa a la base de datos. Se utiliza para migraciones
            DIRECT_URL="postgresql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/${{ secrets.DB_DATABASE }}"
            CURSO_SERVER_JWT_SECRET=${{ secrets.JWT_SECRET }}
            CURSO_BASE_URL_FRONTEND=
            EOF
            
            # Detener y limpiar los contenedores existentes
            docker compose down || true
            docker system prune --all --force || true
            docker volume prune --force || true
            
            # Construir e iniciar el contenedor
            docker compose up --build -d
            
            # Espere a que el contenedor esté listo
            sleep 15
            
            # Verifique que el contenedor tenga la carpeta dist 
            echo "Comprobando la carpeta dist en el contenedor:"
            docker exec nestjs-app ls -la /usr/src/app/dist/ || echo "Carpeta dist no encontrada"
            
            